import {
  buildClientSchema,
  getIntrospectionQuery,
  GraphQLSchema,
  OperationTypeNode,
  print,
  Kind,
  SelectionSetNode,
  OperationDefinitionNode,
} from 'graphql';

import { buildOperationNodeForField } from '@graphql-tools/utils';

async function getSchemaFromUrl(url: string): Promise<GraphQLSchema> {
  try {
    const response = await fetch(url, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        query: getIntrospectionQuery().toString(),
      }),
    });

    const { data } = await response.json();

    return buildClientSchema(data);
  } catch (e) {
    throw e;
  }
}

// Generate the query and mutations operations from the schema
async function generateOperationsFromSchema(url: string = "http://localhost:8080/public/gql"): Promise<string> {
  const schema: GraphQLSchema = await getSchemaFromUrl(url);

  const operationsDictionary = {
    query: { ...(schema.getQueryType()?.getFields() || {}) },
    mutation: { ...(schema.getMutationType()?.getFields() || {}) },
    subscription: { ...(schema.getSubscriptionType()?.getFields() || {}) },
  };

  let documentString: string = '';

  Object.keys(operationsDictionary).forEach((kind: string) => {
    Object.keys((operationsDictionary as any)[kind]).forEach((field: string) => {
      const operationAST = buildOperationNodeForField({
        schema,
        kind: kind as OperationTypeNode,
        field,
      });

      const modifiedOperationAST: OperationDefinitionNode = {
        ...operationAST,
        selectionSet: addTypenameToSelectionSet(operationAST.selectionSet),
      };

      documentString += print(modifiedOperationAST);
    });
  });

  let mod = removeTypeNamesFromAST(documentString);
  mod = removeExclamationMarksFromNames(mod)
  return mod;
}


// This function adds __typename to all selection sets recursively
function addTypenameToSelectionSet(selectionSet: SelectionSetNode): SelectionSetNode {
  const selections = selectionSet.selections.map(selection => {
      // If the selection is a field that itself has a selection set,
      // recurse into that selection set.
      if (selection.kind === Kind.FIELD && selection.selectionSet) {
          return {
              ...selection,
              selectionSet: addTypenameToSelectionSet(selection.selectionSet),
          };
      }
      return selection;
  });

  // Add __typename to the selections if it's not already present
  if (!selections.some(selection => selection.kind === Kind.FIELD && selection.name.value === '__typename')) {
      selections.push({
          kind: Kind.FIELD,
          name: { kind: Kind.NAME, value: '__typename' },
      });
  }

  return {
      ...selectionSet,
      selections,
  };
}

// The operations generated by generateOperationsFromSchema were of the form functionName_query
// This changes them to just functionName 
function removeTypeNamesFromAST(ast: string) {
  const pattern = /(_query|_mutation|_subscription)/g;

  return ast.replace(pattern, '');
}

// The removes `!` from variables. This occurs because of a bug in the @graphql-tools/utils package
function removeExclamationMarksFromNames(ast: string) {
  return ast.replace(/(?<=NonNull)(!)/g, 'NonNull');
}

export default generateOperationsFromSchema;