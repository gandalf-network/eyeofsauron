import {
  buildClientSchema,
  getIntrospectionQuery,
  GraphQLSchema,
  OperationTypeNode,
  print,
} from 'graphql';

import { buildOperationNodeForField } from '@graphql-tools/utils';

async function getSchemaFromUrl(url: string): Promise<GraphQLSchema> {
  try {
    const response = await fetch(url, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        query: getIntrospectionQuery().toString(),
      }),
    });

    const { data } = await response.json();

    return buildClientSchema(data);
  } catch (e) {
    throw e;
  }
}

// Generate the query and mutations operations from the schema
async function generateOperationsFromSchema(url: string): Promise<string> {
  const schema: GraphQLSchema = await getSchemaFromUrl(url);

  const operationsDictionary = {
    query: { ...(schema.getQueryType()?.getFields() || {}) },
    mutation: { ...(schema.getMutationType()?.getFields() || {}) },
    subscription: { ...(schema.getSubscriptionType()?.getFields() || {}) },
  };

  let documentString: string = '';

  Object.keys(operationsDictionary).forEach((kind: string) => {
    Object.keys((operationsDictionary as any)[kind]).forEach((field: string) => {
      const operationAST = buildOperationNodeForField({
        schema,
        kind: kind as OperationTypeNode,
        field,
      });

      documentString += print(operationAST);
    });
  });

  const mod = removeTypeNamesFromAST(documentString);
  return mod;
}

// The operations generated by generateOperationsFromSchema were of the form functionName_query
// This changes them to just functionName 
function removeTypeNamesFromAST(ast: string) {
  const pattern = /(_query|_mutation|_subscription)/g;

  return ast.replace(pattern, '');
}

export default generateOperationsFromSchema;